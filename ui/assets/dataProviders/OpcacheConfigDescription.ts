const opcacheConfigDescriptionMap = {
    'opcache.enable': 'Enables the opcode cache. When disabled, code is not optimised or cached. The setting opcache.enable can not be enabled at runtime through ini_set(), it can only be disabled. Trying to enable it in a script will generate a warning.',
    'opcache.enable_cli': 'Enables the opcode cache for the CLI version of PHP.',
    'opcache.memory_consumption': 'The size of the shared memory storage used by OPcache, in megabytes. The minimum permissible value is "8", which is enforced if a smaller value is set.',
    'opcache.interned_strings_buffer': 'The amount of memory used to store interned strings, in megabytes.',
    'opcache.max_accelerated_files': 'The maximum number of keys (and therefore scripts) in the OPcache hash table. The actual value used will be the first number in the set of prime numbers { 223, 463, 983, 1979, 3907, 7963, 16229, 32531, 65407, 130987, 262237, 524521, 1048793 } that is greater than or equal to the configured value. The minimum value is 200. The maximum value is 1000000. Values outside of this range are clamped to the permissible range.',
    'opcache.max_wasted_percentage': 'The maximum percentage of wasted memory that is allowed before a restart is scheduled, if there is insufficient free memory. The maximum permissible value is "50", which is enforced if a larger value is set.',
    'opcache.use_cwd': 'If enabled, OPcache appends the current working directory to the script key, thereby eliminating possible collisions between files with the same base name. Disabling this directive improves performance, but may break existing applications.',
    'opcache.validate_timestamps': 'If enabled, OPcache will check for updated scripts every opcache.revalidate_freq seconds. When this directive is disabled, you must reset OPcache manually via opcache_reset(), opcache_invalidate() or by restarting the Web server for changes to the filesystem to take effect.',
    'opcache.revalidate_freq': 'How often to check script timestamps for updates, in seconds. 0 will result in OPcache checking for updates on every request. This configuration directive is ignored if opcache.validate_timestamps is disabled.',
    'opcache.revalidate_path': 'If disabled, existing cached files using the same include_path will be reused. Thus, if a file with the same name is elsewhere in the include_path, it won\'t be found.',
    'opcache.save_comments': 'If disabled, all documentation comments will be discarded from the opcode cache to reduce the size of the optimised code. Disabling this configuration directive may break applications and frameworks that rely on comment parsing for annotations, including Doctrine, Zend Framework 2 and PHPUnit.',
    'opcache.fast_shutdown': 'If enabled, a fast shutdown sequence is used that doesn\'t free each allocated block, but relies on the Zend Engine memory manager to deallocate the entire set of request variables en masse. If enabled, a fast shutdown sequence is used that doesn\'t free each allocated block, but relies on the Zend Engine memory manager to deallocate the entire set of request variables en masse.',
    'opcache.enable_file_override': 'When enabled, the opcode cache will be checked for whether a file has already been cached when file_exists(), is_file() and is_readable() are called. This may increase performance in applications that check the existence and readability of PHP scripts, but risks returning stale data if opcache.validate_timestamps is disabled.',
    'opcache.optimization_level': 'A bitmask that controls which optimisation passes are executed.',
    'opcache.inherited_hack': 'This configuration directive is ignored.',
    'opcache.dups_fix': 'This hack should only be enabled to work around "Cannot redeclare class" errors.',
    'opcache.blacklist_filename': 'The location of the OPcache blacklist file. A blacklist file is a text file containing the names of files that should not be accelerated, one per line. Wildcards (*) are allowed, and prefixes can also be provided. Lines starting with a semi-colon are ignored as comments.',
    'opcache.max_file_size': 'The maximum file size that will be cached, in bytes. If this is 0, all files will be cached.',
    'opcache.consistency_checks': 'If non-zero, OPcache will verify the cache checksum every N requests, where N is the value of this configuration directive. This should only be enabled when debugging, as it will impair performance.',
    'opcache.force_restart_timeout': 'The length of time to wait for a scheduled restart to begin if the cache isn\'t active, in seconds. If the timeout is hit, then OPcache assumes that something is wrong and will kill the processes holding locks on the cache to permit a restart. If opcache.log_verbosity_level is set to 2 or above, a warning will be recorded in the error log when this occurs. This directive is not supported on Windows.',
    'opcache.error_log': 'The error log for OPcache errors. An empty string is treated the same as stderr, and will result in logs being sent to standard error (which will be the Web server error log in most cases).',
    'opcache.log_verbosity_level': 'The log verbosity level. By default, only fatal errors (level 0) and errors (level 1) are logged. Other levels available are warnings (level 2), information messages (level 3) and debug messages (level 4).',
    'opcache.preferred_memory_model': 'The preferred memory model for OPcache to use. If left empty, OPcache will choose the most appropriate model, which is the correct behaviour in virtually all cases. Possible values include mmap, shm, posix and win32.',
    'opcache.protect_memory': 'Protects shared memory from unexpected writes while executing scripts. This is useful for internal debugging only.',
    'opcache.mmap_base': 'The base used for shared memory segments on Windows. All PHP processes have to map shared memory into the same address space. Using this directive allows "Unable to reattach to base address" errors to be fixed.',
    'opcache.restrict_api': 'Allows calling OPcache API functions only from PHP scripts which path is started from specified string. The default "" means no restriction.',
    'opcache.file_update_protection': 'Prevents caching files that are less than this number of seconds old. It protects from caching of incompletely updated files. In case all file updates on your site are atomic, you may increase performance by setting it to "0".',
    'opcache.huge_code_pages': 'Enables or disables copying of PHP code (text segment) into HUGE PAGES. This should improve performance, but requires appropriate OS configuration. Available on Linux as of PHP 7.0.0, and on FreeBSD as of PHP 7.4.0.',
    'opcache.lockfile_path': 'Absolute path used to store shared lockfiles (for *nix only)',
    'opcache.opt_debug_level': 'Produces opcode dumps for debugging different stages of optimizations. 0x10000 will output opcodes as the compiler produced them before any optimization occurs while 0x20000 will output optimized codes.',
    'opcache.file_cache': 'Enables and sets the second level cache directory. It should improve performance when SHM memory is full, at server restart or SHM reset. The default "" disables file based caching.',
    'opcache.file_cache_only': 'Enables or disables opcode caching in shared memory.',
    'opcache.file_cache_consistency_checks': 'Enables or disables checksum validation when script loaded from file cache.',
    'opcache.file_cache_fallback': 'Implies opcache.file_cache_only=1 for a certain process that failed to reattach to the shared memory (for Windows only). Explicitly enabled file cache is required. Caution: disabling this configuration option may prevent processes to start, and is therefore discouraged.',
    'opcache.validate_permission': 'Validates the cached file permissions against the current user.',
    'opcache.validate_root ': 'Prevents name collisions in chroot\'ed environments. This should be enabled in all chroot\'ed environments to prevent access to files outside the chroot.',
    'opcache.preload': 'Specifies a PHP script that is going to be compiled and executed at server start-up, and which may preload other files, either by includeing them or by using the opcache_compile_file() function. All the entities (e.g. functions and classes) defined in these files will be available to requests out of the box, until the server is shut down. Note: preloading is not supported on Windows.',
    'opcache.preload_user': 'Preloading code as root is not allowed for security reasons. This directive facilitates to let the preloading to be run as another user.',
    'opcache.cache_id': 'On Windows, all processes running the same PHP SAPI under the same user account having the same cache ID share a single OPcache instance. The value of the cache ID can be freely chosen. Tip: for IIS, different application pools can have their own OPcache instance by using the environment variable APP_POOL_ID as opcache.cache_id.',
    'opcache.jit': 'For typical usage, this option accepts one of four string values: <ul><li>disable: Completely disabled, cannot be enabled at runtime.<li></li>off: Disabled, but can be enabled at runtime.<li>tracing/on: Use tracing JIT. Enabled by default and recommended for most users.<li>function: Use function JIT.</ul>',
    'opcache.jit_buffer_size': 'The amount of shared memory to reserve for compiled JIT code. A zero value disables the JIT. When an int is used, the value is measured in bytes. Shorthand notation (K (for Kilobytes), M (for Megabytes) and G (for Gigabytes; available since PHP 5.1.0)), may also be used.',
    'opcache.jit_debug': 'A bit mask specifying which JIT debug output to enable. For possible values, please consult zend_jit.h.',
    'opcache.jit_bisect_limit': 'Debugging option that disables JIT compilation after compiling a certain number of functions. This may be helpful to bisect the source of a JIT miscompilation.',
    'opcache.jit_prof_threshold': 'When using the "profile on first request" trigger mode, this threshold determines whether a function is considered hot. The number of calls to the function divided by the number of calls to all functions must be above the threshold. For example, a threshold of 0.005 means that functions that made up more than 0.5% of all calls will be JIT compiled.',
    'opcache.jit_max_root_traces': 'Maximum number of root traces.',
    'opcache.jit_max_side_traces': 'Maximum number of side traces a root trace may have.',
    'opcache.jit_max_exit_counters': 'Maximum number of side trace exit counters. This limits the total number of side traces there may be, across all root traces.',
    'opcache.jit_hot_loop': 'After how many iterations a loop is considered hot.',
    'opcache.jit_hot_func': 'After how many calls a function is considered hot.',
    'opcache.jit_hot_return': 'After how many returns a return is considered hot.', 
    'opcache.jit_hot_side_exit': 'After how many exits a side exit is considered hot.',
    'opcache.jit_blacklist_root_trace': 'Maximum number of times the compilation of a root trace is attempted before it is blacklisted.',
    'opcache.jit_blacklist_side_trace': 'Maximum number of times the compilation of a side trace is attempted before it is blacklisted.',
    'opcache.jit_max_loop_unrolls': 'Maximum number of attempts to unroll a loop in a side trace, trying to reach the root trace and close the outer loop.',
    'opcache.jit_max_recursive_calls': 'Maximum number of unrolled recursive call loops.',
    'opcache.jit_max_recursive_returns': 'Maximum number of unrolled recursive return loops.',
    'opcache.jit_max_polymorphic_calls': 'Maximum number of attempts to inline polymorphic (dynamic or method) calls. Calls above this limit are treated as megamorphic and are not inlined.',
};

export {
    opcacheConfigDescriptionMap
};